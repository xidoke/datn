// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

generator erd {
  provider = "prisma-erd-generator"
  output   = "../ERD.svg" // This will create ERD.svg in parent directory
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model FileAsset {
  id              String    @id @default(uuid())
  asset           String    
  size            Int       
  attributes      Json      
  entityType      String    
  isUploaded      Boolean   @default(false)
  isDeleted       Boolean   @default(false)
  storageMetadata Json?     

  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  deletedAt       DateTime?

  workspaceId     String
  workspace       Workspace @relation(fields: [workspaceId], references: [id])
  
  createdById     String
  createdBy       User      @relation("CreatedAssets", fields: [createdById], references: [id])

  userId          String?
  user            User?     @relation("UserAssets", fields: [userId], references: [id], onDelete: SetNull)

  projectId       String?
  project         Project?  @relation(fields: [projectId], references: [id], onDelete: Cascade)

  issueId         String?
  issue           Issue?    @relation(fields: [issueId], references: [id], onDelete: Cascade)

  @@index([workspaceId])
  @@index([createdById])
  @@index([userId])
  @@index([projectId])
  @@index([issueId])
  @@index([entityType])
}

model User {
  id            String    @id @default(uuid())
  email         String    @unique
  cognitoId     String    @unique
  role          String    @default("USER")
  firstName     String?
  lastName      String?
  avatarUrl     String?
  isActive      Boolean   @default(true)
  ownedWorkspaces Workspace[]
  workspaces      WorkspaceMember[]
  createdAssets   FileAsset[] @relation("CreatedAssets")
  userAssets      FileAsset[] @relation("UserAssets")
  createdIssues   Issue[]         @relation("CreatedIssues")
  assignedIssues  IssueAssignee[]
  comments        IssueComment[]
  lastWorkspaceSlug String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  @@map("users")
}

model Workspace {
  id            String    @id @default(uuid())
  slug          String    @unique
  name          String
  owner         User     @relation(fields: [ownerId], references: [id])
  ownerId       String   
  logoUrl      String?
  FileAssets    FileAsset[]
  projects      Project[]
  invitations   WorkspaceInvitation[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  members       WorkspaceMember[]
  @@map("workspaces")
}

model WorkspaceInvitation {
  id          String    @id @default(uuid())
  email       String
  role        WorkspaceRole   @default(MEMBER) // You might want to use an enum here
  status      String    // e.g., "PENDING", "ACCEPTED", "REJECTED"
  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id])
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@unique([email, workspaceId])
}
enum WorkspaceRole {
  OWNER
  ADMIN
  MEMBER
}
model WorkspaceMember {
  id            String        @id @default(uuid())
  role          WorkspaceRole @default(MEMBER)
  user          User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        String
  workspace     Workspace     @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  workspaceId   String
  joinedAt      DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  @@unique([userId, workspaceId])
  @@index([workspaceId])
  @@index([userId])
  @@map("workspace_members")
}


model Project {
  id            String          @id @default(uuid())
  name          String
  description   String?
  token         String    @db.VarChar(5)
  workspace     Workspace       @relation(fields: [workspaceId], references: [id])
  workspaceId   String
  issues        Issue[]
  states        State[]  
  labels        Label[] 
  FileAssets FileAsset[]
  lastIssueNumber Int     @default(0)
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt

  @@unique([workspaceId, token])
  @@map("projects")
}

model Issue {
  id            String          @id @default(uuid())
  sequenceNumber Int
  title         String
  description   String?
  state         State?          @relation(fields: [stateId], references: [id])
  stateId       String? // tạm thời để optional
  project       Project        @relation(fields: [projectId], references: [id], onDelete: Cascade) 
  projectId     String
  creator       User           @relation("CreatedIssues", fields: [creatorId], references: [id])
  creatorId     String
  assignees     IssueAssignee[]
  labels        Label[]
  comments      IssueComment[]
  FileAssets    FileAsset[]
  priority      Int             @default(0) // 0: None, 1: Low, 2: Medium, 3: High, 4: Urgent
  dueDate       DateTime?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  
  @@unique([projectId, sequenceNumber])
  @@index([projectId])
  @@index([stateId])
  @@index([creatorId])
  @@index([priority])
  @@index([dueDate])
  @@map("issues")
}

model IssueComment {
  id        String   @id @default(uuid())
  content   String
  issue     Issue    @relation(fields: [issueId], references: [id])
  issueId   String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  @@map("issue_comments")
}

model IssueAssignee {
  id        String   @id @default(uuid())
  issue     Issue    @relation(fields: [issueId], references: [id])
  issueId   String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  @@map("issue_assignees")
}

model Label {
  id          String   @id @default(uuid())
  name        String
  color       String
  projectId   String
  project     Project  @relation(fields: [projectId], references: [id])
  issues      Issue[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([name, projectId])
  @@index([projectId])
}

model State {
  id          String   @id @default(uuid())
  name        String
  color       String
  group       String
  description String?
  isDefault   Boolean  @default(false)
  projectId   String
  project     Project  @relation(fields: [projectId], references: [id])
  issues      Issue[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([name, projectId])
  @@index([projectId])
  @@index([projectId, isDefault])
}